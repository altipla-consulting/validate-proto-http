// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testdata/good/good.proto

package validate_proto_http_testdata_good

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("testdata/good/good.proto", fileDescriptor_92e29827a28bdb63) }

var fileDescriptor_92e29827a28bdb63 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0xbf, 0x7e, 0x68, 0xa1, 0x23, 0x08, 0x0d, 0x52, 0x4a, 0xab, 0x60, 0x23, 0xb8, 0xe8,
	0x22, 0xc1, 0xba, 0xeb, 0x56, 0x4a, 0x5d, 0xf8, 0x0f, 0x4b, 0x11, 0xdd, 0xd4, 0x69, 0xe6, 0xb6,
	0x19, 0x4c, 0x73, 0x87, 0x99, 0x9b, 0x82, 0x48, 0x37, 0xbe, 0x82, 0x6f, 0xe1, 0xeb, 0xf8, 0x0a,
	0x3e, 0x88, 0xcc, 0x8c, 0x15, 0x14, 0x5c, 0xc4, 0x4d, 0xe0, 0xe6, 0x9e, 0xf3, 0xbb, 0xe7, 0x30,
	0xac, 0x49, 0x60, 0x48, 0x70, 0xe2, 0xf1, 0x1c, 0x51, 0xb8, 0x4f, 0xa4, 0x34, 0x12, 0x06, 0x9d,
	0x25, 0xcf, 0xa4, 0xe0, 0x04, 0x13, 0x37, 0x4f, 0x52, 0x22, 0x15, 0xad, 0xd5, 0x91, 0x15, 0xb6,
	0xda, 0x73, 0xc4, 0x79, 0x06, 0xb1, 0x13, 0x4c, 0x8b, 0x59, 0x0c, 0x0b, 0x45, 0x8f, 0xde, 0xdf,
	0xda, 0xfd, 0x5c, 0x72, 0x25, 0x63, 0x9e, 0xe7, 0x48, 0x9c, 0x24, 0xe6, 0xc6, 0x6f, 0x7b, 0xaf,
	0x1b, 0x6c, 0x6b, 0x88, 0x28, 0x46, 0xa0, 0x97, 0x32, 0x81, 0xe0, 0x82, 0x55, 0x47, 0x72, 0xa1,
	0x32, 0x08, 0x1a, 0x91, 0x37, 0x46, 0x6b, 0x6a, 0x34, 0xb0, 0xd4, 0xd6, 0x2f, 0xff, 0xc3, 0x9d,
	0xe7, 0xb7, 0xf7, 0x97, 0xff, 0xdb, 0x61, 0xcd, 0x37, 0x28, 0x74, 0xd6, 0xaf, 0x74, 0x83, 0x07,
	0x56, 0xb7, 0xf8, 0xf1, 0xf5, 0xd9, 0x15, 0xd7, 0x7c, 0x01, 0x04, 0xda, 0x94, 0x46, 0x1f, 0x3a,
	0xf4, 0x7e, 0xd8, 0xf6, 0xe8, 0x27, 0x65, 0x51, 0x47, 0x2b, 0x77, 0xc3, 0x0f, 0xbd, 0x95, 0x3d,
	0x76, 0xcb, 0xea, 0x3e, 0xfc, 0x25, 0xa5, 0xa0, 0xcf, 0x81, 0x52, 0x14, 0x7f, 0xed, 0x11, 0x7c,
	0xef, 0x31, 0x60, 0x75, 0xcf, 0xbb, 0x91, 0x94, 0x62, 0x41, 0xa7, 0x44, 0xaa, 0x34, 0xfa, 0x5f,
	0x70, 0xc7, 0x36, 0x4f, 0x30, 0xc3, 0xbc, 0xb4, 0xb5, 0xe3, 0x52, 0xb5, 0xc3, 0xc6, 0x57, 0xaa,
	0x78, 0x26, 0xb5, 0xa1, 0xbe, 0x81, 0x04, 0x73, 0x61, 0x23, 0xde, 0xb3, 0xda, 0x58, 0x29, 0xd0,
	0x09, 0x37, 0xe5, 0x5f, 0xef, 0xc0, 0xf1, 0xf7, 0xc2, 0xe6, 0x4f, 0xfe, 0x94, 0x53, 0x92, 0x0e,
	0x81, 0xfa, 0x95, 0xee, 0xb4, 0xea, 0x4c, 0xc7, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x05,
	0xce, 0x45, 0xad, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GoodServiceClient is the client API for GoodService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GoodServiceClient interface {
	Simple(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	GoodURLParameters(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	SimpleOtherMethod(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	MethodWithoutHttp(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Colon(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Uppercase(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type goodServiceClient struct {
	cc *grpc.ClientConn
}

func NewGoodServiceClient(cc *grpc.ClientConn) GoodServiceClient {
	return &goodServiceClient{cc}
}

func (c *goodServiceClient) Simple(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/validate_proto_http.testdata.good.GoodService/Simple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodServiceClient) GoodURLParameters(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/validate_proto_http.testdata.good.GoodService/GoodURLParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodServiceClient) SimpleOtherMethod(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/validate_proto_http.testdata.good.GoodService/SimpleOtherMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodServiceClient) MethodWithoutHttp(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/validate_proto_http.testdata.good.GoodService/MethodWithoutHttp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodServiceClient) Colon(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/validate_proto_http.testdata.good.GoodService/Colon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodServiceClient) Uppercase(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/validate_proto_http.testdata.good.GoodService/Uppercase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodServiceServer is the server API for GoodService service.
type GoodServiceServer interface {
	Simple(context.Context, *empty.Empty) (*empty.Empty, error)
	GoodURLParameters(context.Context, *empty.Empty) (*empty.Empty, error)
	SimpleOtherMethod(context.Context, *empty.Empty) (*empty.Empty, error)
	MethodWithoutHttp(context.Context, *empty.Empty) (*empty.Empty, error)
	Colon(context.Context, *empty.Empty) (*empty.Empty, error)
	Uppercase(context.Context, *empty.Empty) (*empty.Empty, error)
}

func RegisterGoodServiceServer(s *grpc.Server, srv GoodServiceServer) {
	s.RegisterService(&_GoodService_serviceDesc, srv)
}

func _GoodService_Simple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServiceServer).Simple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validate_proto_http.testdata.good.GoodService/Simple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServiceServer).Simple(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodService_GoodURLParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServiceServer).GoodURLParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validate_proto_http.testdata.good.GoodService/GoodURLParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServiceServer).GoodURLParameters(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodService_SimpleOtherMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServiceServer).SimpleOtherMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validate_proto_http.testdata.good.GoodService/SimpleOtherMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServiceServer).SimpleOtherMethod(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodService_MethodWithoutHttp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServiceServer).MethodWithoutHttp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validate_proto_http.testdata.good.GoodService/MethodWithoutHttp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServiceServer).MethodWithoutHttp(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodService_Colon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServiceServer).Colon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validate_proto_http.testdata.good.GoodService/Colon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServiceServer).Colon(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodService_Uppercase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServiceServer).Uppercase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validate_proto_http.testdata.good.GoodService/Uppercase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServiceServer).Uppercase(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoodService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "validate_proto_http.testdata.good.GoodService",
	HandlerType: (*GoodServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Simple",
			Handler:    _GoodService_Simple_Handler,
		},
		{
			MethodName: "GoodURLParameters",
			Handler:    _GoodService_GoodURLParameters_Handler,
		},
		{
			MethodName: "SimpleOtherMethod",
			Handler:    _GoodService_SimpleOtherMethod_Handler,
		},
		{
			MethodName: "MethodWithoutHttp",
			Handler:    _GoodService_MethodWithoutHttp_Handler,
		},
		{
			MethodName: "Colon",
			Handler:    _GoodService_Colon_Handler,
		},
		{
			MethodName: "Uppercase",
			Handler:    _GoodService_Uppercase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testdata/good/good.proto",
}
