// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testdata/bad-repeated/bad_repeated.proto

package validate_proto_http_testdata_bad_repeated

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BadRepeatedServiceClient is the client API for BadRepeatedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BadRepeatedServiceClient interface {
	Method(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Method2(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Method3(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type badRepeatedServiceClient struct {
	cc *grpc.ClientConn
}

func NewBadRepeatedServiceClient(cc *grpc.ClientConn) BadRepeatedServiceClient {
	return &badRepeatedServiceClient{cc}
}

func (c *badRepeatedServiceClient) Method(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/validate_proto_http.testdata.bad_repeated.BadRepeatedService/Method", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badRepeatedServiceClient) Method2(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/validate_proto_http.testdata.bad_repeated.BadRepeatedService/Method2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badRepeatedServiceClient) Method3(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/validate_proto_http.testdata.bad_repeated.BadRepeatedService/Method3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BadRepeatedServiceServer is the server API for BadRepeatedService service.
type BadRepeatedServiceServer interface {
	Method(context.Context, *empty.Empty) (*empty.Empty, error)
	Method2(context.Context, *empty.Empty) (*empty.Empty, error)
	Method3(context.Context, *empty.Empty) (*empty.Empty, error)
}

func RegisterBadRepeatedServiceServer(s *grpc.Server, srv BadRepeatedServiceServer) {
	s.RegisterService(&_BadRepeatedService_serviceDesc, srv)
}

func _BadRepeatedService_Method_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadRepeatedServiceServer).Method(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validate_proto_http.testdata.bad_repeated.BadRepeatedService/Method",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadRepeatedServiceServer).Method(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadRepeatedService_Method2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadRepeatedServiceServer).Method2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validate_proto_http.testdata.bad_repeated.BadRepeatedService/Method2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadRepeatedServiceServer).Method2(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadRepeatedService_Method3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadRepeatedServiceServer).Method3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validate_proto_http.testdata.bad_repeated.BadRepeatedService/Method3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadRepeatedServiceServer).Method3(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _BadRepeatedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "validate_proto_http.testdata.bad_repeated.BadRepeatedService",
	HandlerType: (*BadRepeatedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Method",
			Handler:    _BadRepeatedService_Method_Handler,
		},
		{
			MethodName: "Method2",
			Handler:    _BadRepeatedService_Method2_Handler,
		},
		{
			MethodName: "Method3",
			Handler:    _BadRepeatedService_Method3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testdata/bad-repeated/bad_repeated.proto",
}

func init() {
	proto.RegisterFile("testdata/bad-repeated/bad_repeated.proto", fileDescriptor_bad_repeated_c1f2d86ff4173ba0)
}

var fileDescriptor_bad_repeated_c1f2d86ff4173ba0 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x28, 0x49, 0x2d, 0x2e,
	0x49, 0x49, 0x2c, 0x49, 0xd4, 0x4f, 0x4a, 0x4c, 0xd1, 0x2d, 0x4a, 0x2d, 0x48, 0x4d, 0x2c, 0x49,
	0x4d, 0x01, 0x71, 0xe2, 0x61, 0x1c, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0xcd, 0xb2, 0xc4,
	0x9c, 0xcc, 0x94, 0xc4, 0x92, 0xd4, 0x78, 0x30, 0x3f, 0x3e, 0xa3, 0xa4, 0xa4, 0x40, 0x0f, 0xa6,
	0x5b, 0x0f, 0x59, 0x83, 0x94, 0x74, 0x7a, 0x7e, 0x7e, 0x7a, 0x4e, 0xaa, 0x3e, 0x58, 0x61, 0x52,
	0x69, 0x9a, 0x7e, 0x6a, 0x6e, 0x41, 0x49, 0x25, 0xc4, 0x1c, 0x29, 0x19, 0xa8, 0x64, 0x62, 0x41,
	0xa6, 0x7e, 0x62, 0x5e, 0x5e, 0x7e, 0x49, 0x62, 0x49, 0x66, 0x7e, 0x5e, 0x31, 0x44, 0xd6, 0xa8,
	0x99, 0x89, 0x4b, 0xc8, 0x29, 0x31, 0x25, 0x08, 0x6a, 0x54, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72,
	0xaa, 0x90, 0x2f, 0x17, 0x9b, 0x6f, 0x6a, 0x49, 0x46, 0x7e, 0x8a, 0x90, 0x98, 0x1e, 0x44, 0xbf,
	0x1e, 0xcc, 0x70, 0x3d, 0x57, 0x90, 0xe1, 0x52, 0x38, 0xc4, 0x95, 0x84, 0x9b, 0x2e, 0x3f, 0x99,
	0xcc, 0xc4, 0xab, 0xc4, 0x01, 0xf2, 0x93, 0x7e, 0x69, 0x51, 0x8e, 0x15, 0xa3, 0x96, 0x90, 0x1f,
	0x17, 0x3b, 0xc4, 0x38, 0x23, 0x72, 0xcd, 0x13, 0xc2, 0x6e, 0x9e, 0x31, 0x55, 0xdc, 0x97, 0xc4,
	0x06, 0x56, 0x64, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x80, 0xa6, 0xc0, 0x7a, 0x9e, 0x01, 0x00,
	0x00,
}
