// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testdata/foo/foo.proto

package validate_proto_http_testdata_foo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FooServiceClient is the client API for FooService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FooServiceClient interface {
	GoodSimple(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	BadNoInitialSlash(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	GoodURLParameters(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	BadFinalSlash(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type fooServiceClient struct {
	cc *grpc.ClientConn
}

func NewFooServiceClient(cc *grpc.ClientConn) FooServiceClient {
	return &fooServiceClient{cc}
}

func (c *fooServiceClient) GoodSimple(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/validate_proto_http.testdata.foo.FooService/GoodSimple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooServiceClient) BadNoInitialSlash(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/validate_proto_http.testdata.foo.FooService/BadNoInitialSlash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooServiceClient) GoodURLParameters(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/validate_proto_http.testdata.foo.FooService/GoodURLParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooServiceClient) BadFinalSlash(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/validate_proto_http.testdata.foo.FooService/BadFinalSlash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FooServiceServer is the server API for FooService service.
type FooServiceServer interface {
	GoodSimple(context.Context, *empty.Empty) (*empty.Empty, error)
	BadNoInitialSlash(context.Context, *empty.Empty) (*empty.Empty, error)
	GoodURLParameters(context.Context, *empty.Empty) (*empty.Empty, error)
	BadFinalSlash(context.Context, *empty.Empty) (*empty.Empty, error)
}

func RegisterFooServiceServer(s *grpc.Server, srv FooServiceServer) {
	s.RegisterService(&_FooService_serviceDesc, srv)
}

func _FooService_GoodSimple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServiceServer).GoodSimple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validate_proto_http.testdata.foo.FooService/GoodSimple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServiceServer).GoodSimple(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooService_BadNoInitialSlash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServiceServer).BadNoInitialSlash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validate_proto_http.testdata.foo.FooService/BadNoInitialSlash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServiceServer).BadNoInitialSlash(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooService_GoodURLParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServiceServer).GoodURLParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validate_proto_http.testdata.foo.FooService/GoodURLParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServiceServer).GoodURLParameters(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooService_BadFinalSlash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServiceServer).BadFinalSlash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validate_proto_http.testdata.foo.FooService/BadFinalSlash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServiceServer).BadFinalSlash(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _FooService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "validate_proto_http.testdata.foo.FooService",
	HandlerType: (*FooServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GoodSimple",
			Handler:    _FooService_GoodSimple_Handler,
		},
		{
			MethodName: "BadNoInitialSlash",
			Handler:    _FooService_BadNoInitialSlash_Handler,
		},
		{
			MethodName: "GoodURLParameters",
			Handler:    _FooService_GoodURLParameters_Handler,
		},
		{
			MethodName: "BadFinalSlash",
			Handler:    _FooService_BadFinalSlash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testdata/foo/foo.proto",
}

func init() { proto.RegisterFile("testdata/foo/foo.proto", fileDescriptor_foo_370d01d039537b76) }

var fileDescriptor_foo_370d01d039537b76 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xb1, 0x4a, 0x03, 0x41,
	0x10, 0x86, 0x49, 0x0a, 0xc5, 0x45, 0x85, 0x1c, 0x92, 0x22, 0xb1, 0x08, 0x57, 0x58, 0xa4, 0xd8,
	0xc5, 0xd8, 0xa5, 0x0c, 0x18, 0x11, 0x44, 0x24, 0x47, 0xb0, 0x0c, 0x73, 0xee, 0xde, 0x65, 0x71,
	0xef, 0x66, 0xd9, 0x9b, 0x04, 0x44, 0xd2, 0xf8, 0x0a, 0x3e, 0x9a, 0xaf, 0xe0, 0x6b, 0x08, 0xb2,
	0xbb, 0x89, 0x56, 0x16, 0xb1, 0xd8, 0x62, 0xf6, 0x9f, 0xf9, 0xe6, 0xff, 0x87, 0x75, 0x49, 0x35,
	0x24, 0x81, 0x40, 0x14, 0x88, 0xfe, 0x71, 0xeb, 0x90, 0x30, 0x19, 0xac, 0xc1, 0x68, 0x09, 0xa4,
	0x16, 0xa1, 0x5e, 0x2c, 0x89, 0x2c, 0xdf, 0xf5, 0xf2, 0x02, 0xb1, 0xd7, 0x2f, 0x11, 0x4b, 0xa3,
	0x44, 0xd0, 0xf3, 0x55, 0x21, 0x54, 0x65, 0xe9, 0x25, 0x8e, 0xf7, 0xce, 0xb7, 0x22, 0x58, 0x2d,
	0xa0, 0xae, 0x91, 0x80, 0x34, 0xd6, 0x4d, 0x54, 0x47, 0x5f, 0x6d, 0xc6, 0xa6, 0x88, 0x99, 0x72,
	0x6b, 0xfd, 0xa4, 0x92, 0x19, 0x63, 0x37, 0x88, 0x32, 0xd3, 0x95, 0x35, 0x2a, 0xe9, 0xf2, 0x38,
	0xcb, 0x77, 0x60, 0x7e, 0xed, 0xc1, 0xbd, 0x3f, 0xfe, 0xd3, 0xb3, 0xb7, 0x8f, 0xcf, 0xf7, 0xf6,
	0x69, 0x7a, 0x24, 0x4a, 0x44, 0x29, 0x56, 0xce, 0x8c, 0x5b, 0xc3, 0xe4, 0x91, 0x75, 0x26, 0x20,
	0xef, 0xf1, 0xb6, 0xd6, 0xa4, 0xc1, 0x64, 0x06, 0x9a, 0xe5, 0xde, 0xe8, 0x24, 0xa0, 0x8f, 0xd3,
	0xc3, 0x1c, 0x7e, 0xc0, 0xcf, 0xac, 0xe3, 0xcd, 0xce, 0x67, 0x77, 0x0f, 0xe0, 0xa0, 0x52, 0xa4,
	0x5c, 0xb3, 0x37, 0xf8, 0x22, 0x80, 0x07, 0x69, 0x3f, 0x7a, 0x7e, 0xb5, 0x1e, 0x75, 0xb9, 0x09,
	0x3b, 0x62, 0x31, 0xda, 0xf8, 0x65, 0x73, 0x76, 0x32, 0x01, 0x39, 0xd5, 0xf5, 0x7f, 0x13, 0xfc,
	0x1e, 0x67, 0x1b, 0x41, 0x8c, 0x5b, 0xc3, 0xfc, 0x20, 0x74, 0x5d, 0x7d, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x34, 0xec, 0x16, 0x91, 0xfd, 0x01, 0x00, 0x00,
}
